<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Wishlist</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    body {
      background-color: #f4f4f4;
      margin: 0;
      padding: 0;
    }

    .sidebar {
      background-color: #fff;
      border-right: 1px solid #ddd;
      height: calc(100vh - 56px);
      overflow-y: auto;
      padding: 20px;
    }

    .content {
      padding: 20px;
    }

    .card {
      margin-bottom: 20px;
      position: relative;
    }

    .card img {
      height: 200px;
      object-fit: cover;
    }

    .card-title {
      font-size: 1.2em;
      margin-bottom: 10px;
    }

    .card-text {
      margin-bottom: 10px;
    }

    .rating {
      color: #FFD700;
    }

    .footer {
      width: 100%;
    }

    .delete-icon {
      position: absolute;
      top: 10px;
      right: 10px;
      color: black;
      cursor: pointer;
    }
    .addToCart{
       position: absolute;
      top: 10px;
      right: 40px;
      color: black;
      cursor: pointer;
    }

        margin-bottom: 20px;
      font-size: 24px;
      font-weight: bold;
    }

    .empty-wishlist {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 200px;
      background-color: #fff7e6;
      color: #ff6600;
      font-size: 1.5em;
      font-weight: bold;
      border-radius: 8px;
    }

    #stock-status {
      color: green;
      font-weight: bold;
      background-color: #dddddd;
    }
    #pagination-container {
    display: flex;
    justify-content: center;
    margin: 20px 0;
}

.pagination-button {
    padding: 8px 12px;
    margin: 0 5px;
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 4px;
}

.pagination-button:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
}

.pagination-button:hover:not(:disabled) {
    background-color: #0056b3;
}
.sidebar{
  height:auto
}
  </style>
</head>
<body>
   <div class="col-md-9 content">
    <div class="wishlist-title">Wishlist</div>
    <div class="error-message" id="stock-status"></div>
    <div class="row" id="wishlist-container"></div>
    <div id="pagination-container"></div>

  </div>

  <script>
     let currentPage = 1;
    let totalPages = 1;

    document.addEventListener('DOMContentLoaded', async () => {
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
        await loadWishlist(currentPage);
 });
      async function loadWishlist(page = 1) {
        try {
                const wishlistContainer = document.getElementById('wishlist-container');

          const response = await fetch(`/getWishlistData?page=${page}`);
          const data = await response.json();

          if (data.success) {
            totalPages = data.totalPages;
            renderWishlist(data.products);
            createPaginationButtons();
          } else {
            wishlistContainer.innerHTML = `
              <div class="col-12">
                <div class="empty-wishlist">
                  <p>Your wishlist is empty.</p>
                </div>
              </div>
            `;
          }
        } catch (error) {
          console.error('Error fetching wishlist:', error);
        }
      }

      function renderWishlist(products) {
              const wishlistContainer = document.getElementById('wishlist-container');

        wishlistContainer.innerHTML = '';

        if (products.length === 0) {
          wishlistContainer.innerHTML = `
            <div class="col-12">
              <div class="empty-wishlist">
                <p>Your wishlist is empty.</p>
              </div>
            </div>
          `;
        } else {
          products.forEach(product => {
            const productCard = `
              <div class="col-md-4">
                <div class="card">
                  <img src="${product.thumbnailPaths[0]}" class="card-img-top" alt="${product.productName}">
                  <div class="card-body">
                    <h5 class="card-title">${product.productName}</h5>
                    <p class="card-text">Category: ${product.categoryName}</p>
                    <p id="status" style="color:${product.color}">${product.status}</p>
                    <p class="card-text">Price: â‚¹${product.price}</p>
                    <div class="rating">
                      ${renderStars(product.rating)}
                    </div>
                    <i class="fas fa-trash-alt delete-icon" title="Delete" data-product-id="${product._id}"></i>
                    ${product.quantity > 0 ? `<i class="fas fa-shopping-cart addToCart" title="Add to Cart" data-product-id="${product._id}"></i>` : ''}
                  </div>
                </div>
              </div>
            `;
            wishlistContainer.innerHTML += productCard;
          });
           wishlistContainer.addEventListener('click', (event) => {
        if (event.target.classList.contains('addToCart')) {
            const productId = event.target.getAttribute('data-product-id');
            handleAddToCart(productId); // Call the function with the product ID
        }
    });
        }
      }

      function renderStars(rating) {
        const fullStars = Math.floor(rating);
        const halfStar = rating % 1 !== 0;
        const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

        return `${'<i class="fas fa-star"></i>'.repeat(fullStars)}${halfStar ? '<i class="fas fa-star-half-alt"></i>' : ''}${'<i class="far fa-star"></i>'.repeat(emptyStars)}`;
      }

   function createPaginationButtons() {
        const paginationContainer = document.getElementById('pagination-container');

        paginationContainer.innerHTML = ''; // Clear previous buttons

        // Create Previous button
        if (currentPage > 1) {
            const prevButton = document.createElement('button');
            prevButton.textContent = 'Previous';
            prevButton.className = 'pagination-button';
            prevButton.addEventListener('click', () => {
                currentPage--;
                loadWishlist(currentPage);
            });
            paginationContainer.appendChild(prevButton);
        }

        // Create Page buttons
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.textContent = i;
            pageButton.className = 'pagination-button';
            if (i === currentPage) {
                pageButton.disabled = true; // Disable the button for the current page
            }
            pageButton.addEventListener('click', () => {
                currentPage = i;
                loadWishlist(currentPage);
            });
            paginationContainer.appendChild(pageButton);
        }

        // Create Next button
        if (currentPage < totalPages) {
            const nextButton = document.createElement('button');
            nextButton.textContent = 'Next';
            nextButton.className = 'pagination-button';
            nextButton.addEventListener('click', () => {
                currentPage++;
                loadWishlist(currentPage);
            });
            paginationContainer.appendChild(nextButton);
        }
    }

    
   

      

    document.addEventListener('DOMContentLoaded', () => {
      const wishlistContainer = document.getElementById('wishlist-container');

      wishlistContainer.addEventListener('click', async (event) => {
        if (event.target.classList.contains('delete-icon')) {
          const productId = event.target.dataset.productId;
          // Use SweetAlert for confirmation
          Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to remove this item from your wishlist?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
          }).then(async (result) => {
            if (result.isConfirmed) {
              try {
                const response = await fetch('/deletWishlist', {
                  method: 'DELETE',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ productId: productId })
                });

                if (response.ok) {
                  // Remove the item from the DOM
                  event.target.closest('.col-md-4').remove();
                   loadWishlist(currentPage);

                  // Check if the wishlist is now empty
                  if (!wishlistContainer.querySelector('.col-md-4')) {
                    wishlistContainer.innerHTML = `
                  <div class="col-12">
                    <div class="empty-wishlist">
                      <p>Your wishlist is empty.</p>
                    </div>
                  </div>
                `;
                  }

                  // Display success message
                  Swal.fire(
                    'Deleted!',
                    'Your item has been removed from the wishlist.',
                    'success'
                  );
                } else {
                  console.error('Failed to remove product from wishlist');
                  Swal.fire(
                    'Error!',
                    'Failed to remove product from wishlist. Please try again.',
                    'error'
                  );
                }
              } catch (error) {
                console.error('Error:', error);
                Swal.fire(
                  'Error!',
                  'An error occurred. Please try again.',
                  'error'
                );
              }
            }
          });
        }
      });
    });


//add to cart
async function handleAddToCart(productId) {
    const stockStatus = document.getElementById('stock-status'); // Ensure this ID exists

    const quantity = 1; // Adjust quantity as needed

    try {
        // Step 1: Check the quantity limit
        const quantityResponse = await fetch('/updateCartQuantity', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ productId, quantity,wish:'yes'})
        });

        const quantityData = await quantityResponse.json();

        if (!quantityData.success) {alert("hfg")
            // Quantity exceeds available stock or another issue
            Swal.fire({
                icon: 'warning',
                title: 'Quantity Limit',
                text: quantityData.message, // Show the error message from the server
                confirmButtonText: 'OK'
            });
            return; // Exit the function if quantity limit is exceeded
        }

        // Step 2: If the quantity check passed, proceed to add to cart
        const addToCartResponse = await fetch('/addToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId, quantity })
        });

        const addToCartData = await addToCartResponse.json();

        if (addToCartResponse.status !== 200) {
            stockStatus.innerText = addToCartData.message;
            stockStatus.classList.add('error-message');
        } else {
            stockStatus.innerText = 'Added to Cart!';
            stockStatus.classList.remove('error-message');
            setTimeout(() => {
                window.location.href = '/yourCart';
            }, 1000);
        }
    } catch (error) {
        console.error('Error updating quantity or adding to cart:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'There was an error processing your request.',
            confirmButtonText: 'OK'
        });

        stockStatus.innerText = 'Error adding to cart';
        stockStatus.classList.add('error-message');
    }
}
  </script>
</body>

</html>